generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  STAFF
  LEARNER
}

enum SubmissionStatus {
  PENDING
  PASSED
  FAILED
}

enum TrackPhase {
  FOUNDATION
  AI_AUGMENTED
  INTEGRATION
  ADVANCED
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  passwordHash  String
  role          Role     @default(LEARNER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  profile       Profile?
  submissions   Submission[]
  xpEvents      XPEvent[]
  badges        UserBadge[]
}

model Profile {
  id          String  @id @default(cuid())
  userId      String  @unique
  user        User    @relation(fields: [userId], references: [id])
  displayName String
  bio         String?
  githubUrl   String?
}

model Track {
  id      String   @id @default(cuid())
  slug    String   @unique
  name    String
  phase   TrackPhase
  modules Module[]
  order   Int      @default(0)
}

model Module {
  id       String  @id @default(cuid())
  slug     String  @unique
  title    String
  trackId  String
  track    Track   @relation(fields: [trackId], references: [id])
  summary  String?
  lessons  Lesson[]
  labs     Lab[]
  quizzes  Quiz[]
  order    Int     @default(0)
}

model Lesson {
  id        String  @id @default(cuid())
  moduleId  String
  module    Module  @relation(fields: [moduleId], references: [id])
  slug      String  @unique
  title     String
  contentMd String
  order     Int     @default(0)
}

model Lab {
  id          String  @id @default(cuid())
  moduleId    String
  module      Module  @relation(fields: [moduleId], references: [id])
  title       String
  description String
  graderType  String
  maxScore    Int     @default(100)
  submissions Submission[]
}

model Quiz {
  id       String  @id @default(cuid())
  moduleId String
  module   Module  @relation(fields: [moduleId], references: [id])
  title    String
  questions Question[]
  submissions Submission[]
}

model Question {
  id      String @id @default(cuid())
  quizId  String
  quiz    Quiz   @relation(fields: [quizId], references: [id])
  kind    String
  prompt  String
  options String?
  answer  String?
}

model Submission {
  id        String            @id @default(cuid())
  userId    String
  user      User              @relation(fields: [userId], references: [id])
  labId     String?
  lab       Lab?              @relation(fields: [labId], references: [id])
  quizId    String?
  quiz      Quiz?             @relation(fields: [quizId], references: [id])
  repoUrl   String?
  code      String?
  answers   String?
  status    SubmissionStatus  @default(PENDING)
  score     Int?
  feedback  String?
  createdAt DateTime          @default(now())
  aiEvaluation AIEvaluation?
}

model Badge {
  id       String @id @default(cuid())
  slug     String @unique
  name     String
  criteria String
  icon     String?
  users    UserBadge[]
}

model UserBadge {
  id       String   @id @default(cuid())
  userId   String
  user     User     @relation(fields: [userId], references: [id])
  badgeId  String
  badge    Badge    @relation(fields: [badgeId], references: [id])
  earnedAt DateTime @default(now())
}

model XPEvent {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  kind      String
  amount    Int
  meta      Json?
  createdAt DateTime @default(now())
}

model AIPromptTemplate {
  id        String   @id @default(cuid())
  slug      String   @unique
  title     String
  template  String
  variables String[]
}

model AIEvaluation {
  id           String      @id @default(cuid())
  submissionId String      @unique
  submission   Submission  @relation(fields: [submissionId], references: [id])
  rubric       String
  model        String
  feedback     String
  score        Int
}

